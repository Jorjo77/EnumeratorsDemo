using System;

namespace EnumeratorsDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            //как да имам форийч в C# за моя колекция - за това са енумераторите и yeld return. Това е много конкретно нещо, което може и дан е ни потрябва, но е срещано и важно (не е фундаментална концепция като дженериците)
            //така направихме наш форич (много малко по различен от оригиналния)
            string[] array = Console.ReadLine().Split();
            StringEnumerator enumerator = new StringEnumerator(array);
            //IEnumerator enumerator = array.GetEnumerator(); с това е оригиналния!!!
            //Енумератора ни държи информация до къде сме стигнали в колекцията - само обхожда и знае до къде сме стигнали;
            //Йерархия - IEnumerable наследява IEnumerator, който има метод GetEnumerator(). Всичко което е IEnumerable има IEnumerator и съответно метода GetEnumerator(), който връща нов енумератор.
            //Ние винаги използваме IEnumerable<Т>, IEnumerable е за стари неща и някъде кода може да ни задължава да го слагаме.

            //yeld return - yeld е ключова думичка и е много интересна, позволява ни да върнем няколко пъти неща от един метод. 
            //В практиката навсякъде където искаме да имплементираме IEnumerable на наша колекция използваме yeld return. Идеята е да правим IEnumerable на колекция (може да е наша за да имаме форийч - за това са тези енумератори, затова е този yeld return )
            //yeld return спира изпълнението на метода до следващия път докато някой не е извикал MoveNext() или до следващата итерация на форийча. Когато форийча продължи на следващия item тогава отива на следващия yeld return.

            //yeld return връща по един елемент на всеки loop cycle

            //params е ключова дума с кояти можем да вземем почече на брой аргументи наведнъж. Само по един params е позволен.Позволен е при деклариране на метод или за конструктор. Трябва да е последния параметър.


            while (enumerator.MoveNext())
            {
                Console.WriteLine(enumerator.Current);
            }
        }
    }
}
